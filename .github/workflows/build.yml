name: linux

on: [push,pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: gcc install
        run: |
          sudo apt install gcc-11 g++-11
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
          sudo update-alternatives --set gcc /usr/bin/gcc-11

      - name: ninja install
        run: sudo apt-get install -y ninja-build

      - name: python install
        uses: actions/setup-python@v2

      - name: qt cache
        id: qt-cache
        uses: actions/cache@v2
        with:
          path: ./qt
          key: ${{runner.os}}-qt-cache

      - name: qt install
        uses: jurplel/install-qt-action@v2
        with:
          version: "5.12.2"
          dir: "./qt"
          install-deps: true
          setup-python: false
          cached: ${{steps.qt-cache.outputs.cache-hit}}

      - name: opencv cache
        id: opencv-cache
        uses: actions/cache@v2
        with:
          path: ./opencv-install
          key: ${{runner.os}}-opencv-cache

      - name: opencv install
        uses: rayandrews/with-opencv-action@v1
        with:
          opencv-version: '4.5.1'
          dir: ./opencv-install
          cached: ${{steps.opencv-cache.outputs.cache-hit}}

      - name: cmake configure
        env:
          CMAKE_PREFIX_PATH: ${{env.Qt5_Dir}}
        run: cmake -DCMAKE_BUILD_TYPE=Release -B ${{github.workspace}}/build -G "Ninja"

      - name: cmake build
        run: cmake --build ${{github.workspace}}/build --config Release

      - name: display build files
        working-directory: ${{github.workspace}}/build
        run: ls -R

      - name: upload build
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: ${{github.workspace}}/build

      - name: run test
        working-directory: ${{github.workspace}}/build
        run: ./shenanigans_test

      - name: cmake test
        working-directory: ${{github.workspace}}/build
        run: ctest --rerun-failed --output-on-failure

  cppcheck:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: download build
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ${{github.workspace}}/build

      - name: cppcheck install
        run: sudo apt-get install -y cppcheck

      - name: cppcheck run
        run: cppcheck --enable=all --error-exitcode=0 src/ 2> cppcheck-result.txt
        #run: cppcheck --project=build/compile_commands.json --enable=all --suppressions-list=.cppcheck-suppressions --error-exitcode=0 2> cppcheck-result.txt

      - name: cppcheck show
        run: cat cppcheck-result.txt

  cpplint:
    needs: build
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: python install
        uses: actions/setup-python@v2

      - name: cpplint install
        uses: BSFishy/pip-action@v1
        with:
          packages: cpplint

      - name: cpplint run
        run: find src/ -name '*.h' -name '*.hpp' -o -name '*.cpp' | xargs cpplint

  clang-tidy:
    needs: build
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: download build
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ${{github.workspace}}/build

      - name: clang-tidy install
        run: sudo apt-get install -y clang-tidy

      - name: clang-tidy run
        continue-on-error: true
        run: find src/ -name '*.h' -name '*.hpp' -o -name '*.cpp' | xargs clang-tidy --format-style=file -p build

  infer:
    needs: build
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: download build
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ${{github.workspace}}/build

      - name: infer install
        run: |
          sudo apt install -y curl
          VERSION=1.1.0; \
          curl -sSL "https://github.com/facebook/infer/releases/download/v$VERSION/infer-linux64-v$VERSION.tar.xz" \
          | sudo tar -C /opt -xJ && \
          sudo ln -s "/opt/infer-linux64-v$VERSION/bin/infer" /usr/local/bin/infer

      - name: infer run
        continue-on-error: true
        run: infer run --compilation-database build/compile_commands.json --keep-going
