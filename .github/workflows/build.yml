name: build/test

on: [push,pull_request]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: gcc install
        run: |
          sudo apt install gcc-11 g++-11
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
          sudo update-alternatives --set gcc /usr/bin/gcc-11

      - name: ninja install
        run: sudo apt-get install -y ninja-build

      - name: python install
        uses: actions/setup-python@v2

      - name: torch install
        working-directory: ${{github.workspace}}/external
        run: |
          wget https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-1.11.0%2Bcpu.zip
          sudo chmod 755 libtorch-cxx11-abi-shared-with-deps-1.11.0+cpu.zip
          unzip libtorch-cxx11-abi-shared-with-deps-1.11.0+cpu.zip
          rm libtorch-cxx11-abi-shared-with-deps-1.11.0+cpu.zip
          ls

      - name: qt install
        run: sudo apt-get install qt5-default # sudo apt-get install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools

      - name: opencv cache
        id: opencv-cache
        uses: actions/cache@v2
        with:
          path: ./opencv-install
          key: ${{runner.os}}-opencv-cache

      - name: opencv install
        uses: rayandrews/with-opencv-action@v1
        with:
          opencv-version: '4.5.1'
          dir: ./opencv-install
          cached: ${{steps.opencv-cache.outputs.cache-hit}}

      - name: cmake configure
        env:
          CMAKE_PREFIX_PATH: ${{env.Qt5_Dir}}
        run: cmake -DCMAKE_BUILD_TYPE=Release -B ${{github.workspace}}/build -G "Ninja"

      - name: cmake build
        run: cmake --build ${{github.workspace}}/build --config Release -j 6

      - name: run test
        working-directory: ${{github.workspace}}/build
        run: ./shenanigans_test

      - name: cmake test
        working-directory: ${{github.workspace}}/build
        run: ctest --rerun-failed --output-on-failure

      # - name: display build files
      #   working-directory: ${{github.workspace}}/build
      #   run: ls -R

      # - name: upload build
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: build
      #     path: ${{github.workspace}}/build

  # clang-tidy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   continue-on-error: true
  #   steps:
  #     - name: checkout repo
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: true

  #     - name: download build
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build
  #         path: ${{github.workspace}}/build

  #     - name: clang-tidy install
  #       run: sudo apt-get install -y clang-tidy

  #     - name: clang-tidy run
  #       continue-on-error: true
  #       run: find src/ -type f \( -iname \*.hpp -o -iname \*.h -o -iname \*.cpp \) | xargs clang-tidy --format-style=file -p build

  # infer:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   continue-on-error: true
  #   steps:
  #     - name: checkout repo
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: true

  #     - name: download build
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build
  #         path: ${{github.workspace}}/build

  #     - name: infer install
  #       run: |
  #         sudo apt install -y curl
  #         VERSION=1.1.0; \
  #         curl -sSL "https://github.com/facebook/infer/releases/download/v$VERSION/infer-linux64-v$VERSION.tar.xz" \
  #         | sudo tar -C /opt -xJ && \
  #         sudo ln -s "/opt/infer-linux64-v$VERSION/bin/infer" /usr/local/bin/infer

  #     - name: infer run
  #       continue-on-error: true
  #       run: infer run --compilation-database build/compile_commands.json --keep-going
